#!/usr/bin/make -f
# -*- makefile -*-

DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
MAKEFLAGS += -j$(NUMJOBS)
endif

name = globus-gridmap-callout-error
_name = globus_gridmap_callout_error
version = 0.3
soname = 0

INSTALLDIR = $(CURDIR)/debian/tmp
GLOBUSPACKAGEDIR = $(INSTALLDIR)$(_datadir)/globus/packages

_prefix = /usr
_bindir = $(_prefix)/bin
_sbindir = $(_prefix)/sbin
_libdir = $(_prefix)/lib
_datadir = $(_prefix)/share
_mandir = $(_datadir)/man
_docdir = $(_datadir)/doc

DEB_BUILD_ARCH_CPU ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH_CPU)

ifneq (,$(filter $(DEB_HOST_ARCH_CPU), amd64 alpha ia64 s390x ppc64 sparc64))
flavor = gcc64pthr
else
flavor = gcc32pthr
endif

sed: sed-stamp
	:

sed-stamp:
	dh_testdir

	for f in `find . ! -path */.pc/* -name Makefile.am` ; do \
	  sed -e 's!^flavorinclude_HEADERS!include_HEADERS!' \
	      -e 's!\(lib[a-zA-Z_]*\)_$$(GLOBUS_FLAVOR_NAME)\.la!\1.la!g' \
	      -e 's!^\(lib[a-zA-Z_]*\)___GLOBUS_FLAVOR_NAME__la_!\1_la_!' \
	    -i $$f ; \
	done
	sed -e "s!<With_Flavors!<With_Flavors ColocateLibraries=\"no\"!" \
	  -i pkgdata/pkg_data_src.gpt.in
	sed -e 's!"gssapi_error"!"globus_gssapi_error"!' \
	  -i pkgdata/pkg_data_src.gpt.in

	touch $@

unsed: cleanup
	dh_testdir

	if [ -e sed-stamp ] ; then \
	  for f in `find . ! -path */.pc/* -name Makefile.am` ; do \
	    sed -e 's!^include_HEADERS!flavorinclude_HEADERS!' \
		-e 's!\(lib[a-zA-Z_]*\)\.la!\1_$$(GLOBUS_FLAVOR_NAME).la!g' \
		-e 's!^\(lib[a-zA-Z_]*\)_la_!\1___GLOBUS_FLAVOR_NAME__la_!' \
	      -i $$f ; \
	  done ; \
	  sed -e "s!<With_Flavors ColocateLibraries=\"no\"!<With_Flavors!" \
	    -i pkgdata/pkg_data_src.gpt.in ; \
	  sed -e 's!"globus_gssapi_error"!"gssapi_error"!' \
	    -i pkgdata/pkg_data_src.gpt.in ; \
	fi

	rm -f sed-stamp

configure: configure-stamp
	:

configure-stamp: sed-stamp
	dh_testdir

	/usr/share/globus/globus-bootstrap.sh

	for f in config.sub config.guess ; do \
	  if [ -e /usr/share/misc/$$f -a ! -e $$f.dist ] ; then \
	    mv $$f $$f.dist ; \
	    cp -f /usr/share/misc/$$f $$f ; \
	  fi ; \
	done

	./configure \
	   --host=$(DEB_HOST_GNU_TYPE) \
	   --build=$(DEB_BUILD_GNU_TYPE) \
	   --prefix=$(_prefix) \
	   --mandir='$${datadir}/man' \
	   --infodir='$${datadir}/info' \
	   --with-flavor=$(flavor) \
	   --enable-doxygen

	touch $@

build: build-stamp
	:

build-stamp: configure-stamp
	dh_testdir

	$(MAKE)

	touch $@

clean: unsed
	:

cleanup:
	dh_testdir
	dh_testroot

	if [ -r Makefile ] ; then $(MAKE) distclean ; fi

	for f in config.sub config.guess ; do \
	  if [ -e $$f.dist ] ; then \
	    mv -f $$f.dist $$f ; \
	  fi ; \
	done

	# Remove autogenerated files

	rm -f aclocal.m4
	rm -f configure
	rm -f config.guess
	rm -f config.sub
	rm -f ltmain.sh
	rm -f mkinstalldirs

	rm -f doxygen/Doxyfile*
	rm -f doxygen/Makefile.am
	rm -f pkgdata/Makefile.am
	rm -f pkgdata/*.filelist
	rm -f pkgdata/*.gpt
	rm -f globus_automake*
	rm -rf autom4te.cache

	rm -rf doxygen/doc

	find . -name Makefile.in -exec rm {} ';'

	rm -f build-stamp configure-stamp

	dh_clean debian/*.install

install: build-stamp
	dh_testdir
	dh_testroot
	dh_clean -k

	$(MAKE) install DESTDIR=$(INSTALLDIR)

	# Remove libtool archives (.la files)
	find $(INSTALLDIR)$(_libdir) -name 'lib*.la' -exec rm -v '{}' \;
	sed '/lib.*\.la$$/d' \
	  -i $(GLOBUSPACKAGEDIR)/$(_name)/$(flavor)_rtl.filelist

	# Generate pkg-config file from GPT metadata
	mkdir -p $(INSTALLDIR)$(_libdir)/pkgconfig
	/usr/share/globus/globus-gpt2pkg-config \
	  pkgdata/pkg_data_$(flavor)_dev.gpt > \
	  $(INSTALLDIR)$(_libdir)/pkgconfig/$(name).pc

	# Move documentation to default debian location
	#mv $(INSTALLDIR)$(_docdir)/$(_name) \
	#  $(INSTALLDIR)$(_docdir)/lib$(name)-dev
	#sed s!doc/$(_name)!doc/lib$(name)-dev! \
	#  -i $(GLOBUSPACKAGEDIR)/$(_name)/noflavor_doc.filelist

	# Use system jquery script
	if [ -r $(INSTALLDIR)$(_docdir)/lib$(name)-dev/html/jquery.js ] ; then \
	  rm $(INSTALLDIR)$(_docdir)/lib$(name)-dev/html/jquery.js ; \
	  ln -s /usr/share/javascript/jquery/jquery.js \
	    $(INSTALLDIR)$(_docdir)/lib$(name)-dev/html/jquery.js ; \
	  echo js:Depends=libjs-jquery >> debian/lib$(name)-doc.substvars ; \
	else \
	  echo js:Depends= >> debian/lib$(name)-doc.substvars ; \
	fi

	# Generate package filelists
	cat $(GLOBUSPACKAGEDIR)/$(_name)/$(flavor)_rtl.filelist \
	  | sed s!^!debian/tmp$(_prefix)! > debian/lib$(name)$(soname).install
	cat $(GLOBUSPACKAGEDIR)/$(_name)/$(flavor)_dev.filelist \
	  | sed s!^!debian/tmp$(_prefix)! > debian/lib$(name)-dev.install
	cat $(GLOBUSPACKAGEDIR)/$(_name)/noflavor_doc.filelist \
	  | sed s!^!debian/tmp$(_prefix)! > debian/lib$(name)-doc.install

	echo debian/tmp$(_libdir)/pkgconfig/$(name).pc \
	  >> debian/lib$(name)-dev.install

binary-indep:
	:

binary-arch: install
	dh_testdir
	dh_testroot
	mkdir -p debian/lib$(name)-doc$(_docdir)
	ln -fs lib$(name)-dev debian/lib$(name)-doc$(_docdir)/lib$(name)-doc
	dh_installchangelogs
	dh_installdocs debian/README
	dh_install --fail-missing
	dh_installman
	dh_link
	dh_strip --dbg-package=globus-gridmap-callout-error-dbg
	dh_compress -X .tag
	dh_fixperms
	dh_perl
	dh_makeshlibs
	dh_installdeb
	dh_shlibdeps -l debian/lib$(name)$(soname)/usr/lib
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
	:

get-orig-source:
	if [ -r $(name)_$(version).orig.tar.gz ] ; then \
	  echo "$(name)_$(version).orig.tar.gz already exists." ; \
	else \
	  if [ ! -r gt5.0.2-all-source-installer.tar.bz2 ] ; then \
	    echo "Downloading Globus Toolkit release." ; \
	    echo "This should be necessary only once for all globus packages." ; \
	    wget -N http://www-unix.globus.org/ftppub/gt5/5.0/5.0.2/installers/src/gt5.0.2-all-source-installer.tar.bz2 ; \
	  fi ; \
	  echo "Extracting relevant parts of the Globus Toolkit release." ; \
	  tar -xjf gt5.0.2-all-source-installer.tar.bz2 \
	    gt5.0.2-all-source-installer/source-trees/gsi/gridmap_callout/error ; \
	  mv gt5.0.2-all-source-installer/source-trees/gsi/gridmap_callout/error \
	    $(name)-$(version) ; \
	  echo "Packing it up again." ; \
	  GZIP=-9 tar --exclude=CVS -czf $(name)_$(version).orig.tar.gz \
	    $(name)-$(version) ; \
	  echo "Cleaning up." ; \
	  rm -rf gt5.0.2-all-source-installer $(name)-$(version) ; \
	fi

.PHONY: build clean binary-indep binary-arch binary install configure get-orig-source
